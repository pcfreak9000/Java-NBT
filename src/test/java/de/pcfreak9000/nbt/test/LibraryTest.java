/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package de.pcfreak9000.nbt.test;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.StringWriter;
import java.util.stream.IntStream;
import java.util.stream.LongStream;

import org.junit.Test;

import de.pcfreak9000.nbt.NBTCompound;
import de.pcfreak9000.nbt.NBTList;
import de.pcfreak9000.nbt.NBTType;
import de.pcfreak9000.nbt.NbtReader;
import de.pcfreak9000.nbt.NbtWriter;
import de.pcfreak9000.nbt.StringNbtWriter;
import de.pcfreak9000.nbt.TagWriter;

public class LibraryTest {
    
    private static final String EXPECTED_STRING = "{s:\"A string\",COMP1:{keyn1:\"NESTED1\",COMP2:{keyn2:\"NESTED2\"}},\"Some int\":123,testList:[\"Gurke1\",\"Gurke2\",\"Gurke3\"],byte:12b,short:123s,int:1234,long:12345l,float:0.1f,double:0.01d}";
    
    private static final byte[] TESTBYTES = new byte[10000];
    private static final int[] TESTINTS = IntStream.range(0, 10000).toArray();
    private static final long[] TESTLONGS = LongStream.range(0, 10000).toArray();
    
    static {
        for (int i = 0; i < TESTBYTES.length; i++) {
            TESTBYTES[i] = (byte) i;
        }
    }
    
    @Test
    public void writeByteArrayTest() throws Exception {
        NBTCompound comp = new NBTCompound();
        comp.putByteArray("bytes", TESTBYTES);
        try (NbtWriter writer = new NbtWriter(new FileOutputStream("tmp.dat"))) {
            comp.accept(writer);
        }
        NBTCompound read;
        try (NbtReader reader = new NbtReader(new FileInputStream("tmp.dat"))) {
            read = reader.toCompoundTag();
        }
        assertArrayEquals(TESTBYTES, read.getByteArray("bytes"));
    }
    
    @Test
    public void writeIntArrayTest() throws Exception {
        NBTCompound comp = new NBTCompound();
        comp.putIntArray("ints", TESTINTS);
        try (NbtWriter writer = new NbtWriter(new FileOutputStream("tmp.dat"))) {
            comp.accept(writer);
        }
        NBTCompound read;
        try (NbtReader reader = new NbtReader(new FileInputStream("tmp.dat"))) {
            read = reader.toCompoundTag();
        }
        assertArrayEquals(TESTINTS, read.getIntArray("ints"));
    }
    
    @Test
    public void writeLongArrayTest() throws Exception {
        NBTCompound comp = new NBTCompound();
        comp.putLongArray("longs", TESTLONGS);
        try (NbtWriter writer = new NbtWriter(new FileOutputStream("tmp.dat"))) {
            comp.accept(writer);
        }
        NBTCompound read;
        try (NbtReader reader = new NbtReader(new FileInputStream("tmp.dat"))) {
            read = reader.toCompoundTag();
        }
        assertArrayEquals(TESTLONGS, read.getLongArray("longs"));
    }
    
    @Test
    public void longArrayTest() throws Exception {
        NBTCompound comp = new NBTCompound();
        comp.putLongArray("longs", TESTLONGS);
        TagWriter writer = new TagWriter();
        comp.accept(writer);
        NBTCompound out = writer.getCompound();
        long[] bytes = out.getLongArray("longs");
        assertArrayEquals(TESTLONGS, bytes);
    }
    
    @Test
    public void intArrayTest() throws Exception {
        NBTCompound comp = new NBTCompound();
        comp.putIntArray("ints", TESTINTS);
        TagWriter writer = new TagWriter();
        comp.accept(writer);
        NBTCompound out = writer.getCompound();
        int[] bytes = out.getIntArray("ints");
        assertArrayEquals(TESTINTS, bytes);
    }
    
    @Test
    public void byteArrayTest() throws Exception {
        NBTCompound comp = new NBTCompound();
        comp.putByteArray("byteArray", TESTBYTES);
        TagWriter writer = new TagWriter();
        comp.accept(writer);
        NBTCompound out = writer.getCompound();
        byte[] bytes = out.getByteArray("byteArray");
        assertArrayEquals(TESTBYTES, bytes);
    }
    
    @Test
    public void bigtest1() throws Exception {
        NBTCompound test = new NBTCompound();
        test.putString("s", "A string");
        NBTCompound nested = new NBTCompound();
        nested.putString("keyn1", "NESTED1");
        test.putCompound("COMP1", nested);
        test.putInt("Some int", 123);
        NBTCompound nested2 = new NBTCompound();
        nested2.putString("keyn2", "NESTED2");
        nested.putCompound("COMP2", nested2);
        NBTList list = new NBTList(NBTType.String);
        list.add("Gurke1");
        list.add("Gurke2");
        list.add("Gurke3");
        test.putList("testList", list);
        test.putByte("byte", (byte) 12);
        test.putShort("short", (short) 123);
        test.putInt("int", 1234);
        test.putLong("long", 12345l);
        test.putFloat("float", 0.1f);
        test.putDouble("double", 0.01);
        try (NbtWriter writer = new NbtWriter(new FileOutputStream("tmp.dat"))) {
            test.accept(writer);
        }
        NBTCompound comp;
        try (NbtReader reader = new NbtReader(new FileInputStream("tmp.dat"))) {
            comp = reader.toCompoundTag();
        }
        try (StringWriter writ = new StringWriter()) {
            StringNbtWriter sw = new StringNbtWriter(writ);
            comp.accept(sw);
            assertEquals(EXPECTED_STRING, writ.toString());
        }
    }
}
